name: Execute Python Notebook

on:  
  workflow_dispatch:
  schedule:    
     # Run at 8:00am New York time on Monday, Tuesday, and Friday
    - cron: "0 13 * * 1,2,5"

permissions:
  contents: write  # <-- allow pushing commits

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed so we can commit back

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install papermill jupyter pandas duckdb requests ipytree altair lxml_html_clean

      - name: Run notebook with parameters
        uses: yaananth/run-notebook@v2
        env:
          RUNNER: ${{ toJson(runner) }}
          SECRETS: ${{ toJson(secrets) }}
          GITHUB: ${{ toJson(github) }}
        with:
          notebook: "rfl.ipynb"
          isReport: false
          poll: true

      # ---- Commit ONE JSON file back to main ----
      # Change TARGET_JSON to the exact file your notebook creates.
      - name: Commit JSON output to main
        if: github.ref == 'refs/heads/main'  # only push when running on main
        env:
          TARGET_JSON: rfl_standings_2025.json      # <--- set your filename here
        run: |
          set -e
          if [ ! -f "$TARGET_JSON" ]; then
            echo "File $TARGET_JSON not found; nothing to commit."
            exit 0
          fi

          # Optionally ensure stable ordering/formatting to avoid noisy diffs
          # python - <<'PY'
          # import json, sys
          # p = sys.argv[1]
          # with open(p) as f: data = json.load(f)
          # with open(p, "w") as f: json.dump(data, f, indent=2, sort_keys=True)
          # PY "$TARGET_JSON"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add only that file
          git add "$TARGET_JSON"

          # Commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to $TARGET_JSON; skipping commit."
            exit 0
          fi
          
          git commit -m "chore: update $TARGET_JSON [nb-update]"
          git push origin HEAD:main

      # ---- Send Monday email with embedded PNGs via Mailgun ----
      - name: Send Monday email via Mailgun (New York time)
        if: ${{ always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
        env:
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
          MAILGUN_TO: ${{ secrets.MAILGUN_TO }}
          MAILGUN_FROM: ${{ secrets.MAILGUN_FROM }}
        run: |
          set -e

          # Only proceed on Mondays in New York time
          #if [ "$(TZ=America/New_York date +%u)" != "1" ]; then
          #  echo "Not Monday in New York time; skipping email."
          #  exit 0
          #fi

          # Basic secret checks
          : "${MAILGUN_API_KEY:?Missing MAILGUN_API_KEY}"
          : "${MAILGUN_DOMAIN:?Missing MAILGUN_DOMAIN}"
          : "${MAILGUN_TO:?Missing MAILGUN_TO}"
          : "${MAILGUN_FROM:?Missing MAILGUN_FROM}"

          # Collect up to 5 newest PNGs in repo root (adjust path if needed)
          PNG_LIST=$(ls -1t *.png 2>/dev/null | head -5 || true)
          if [ -z "$PNG_LIST" ]; then
            echo "No PNG files found; sending a link-only email."
          fi

          NY_DATE="$(TZ=America/New_York date '+%B %d, %Y')"
          SUBJECT="RFL Weekly Update – ${NY_DATE}"

          EMAIL_HTML="/tmp/rfl_email.html"
          {
            echo "<!DOCTYPE html><html><body style='font-family:Arial,Helvetica,sans-serif'>"
            echo "<h2>RFL Weekly Update – ${NY_DATE}</h2>"
            echo "<p>View the latest standings and charts here: <a href=\"https://mhopkinsinc.github.io/rfl/\">https://mhopkinsinc.github.io/rfl/</a></p>"
            if [ -n "$PNG_LIST" ]; then
              echo "<hr>"
              echo "<p><strong>Charts</strong></p>"
              for f in $PNG_LIST; do
                bname=$(basename "$f")
                # Scale-friendly inline images
                echo "<div style='margin:16px 0'>"
                echo "<img src=\"cid:${bname}\" alt=\"${bname}\" style='max-width:100%; height:auto; border:1px solid #ddd; padding:4px; border-radius:6px;'/>"
                echo "<div style='font-size:12px;color:#666;margin-top:4px'>${bname}</div>"
                echo "</div>"
              done
            fi
            echo "<hr><p style='font-size:12px;color:#777'>This message was sent automatically by GitHub Actions.</p>"
            echo "</body></html>"
          } > "$EMAIL_HTML"

          # Build curl form fields for inline attachments
          CURL_ARGS=(
            -s --fail
            --user "api:${MAILGUN_API_KEY}"
            "https://api.mailgun.net/v3/${MAILGUN_DOMAIN}/messages"
            -F from="${MAILGUN_FROM}"
            -F to="${MAILGUN_TO}"
            -F subject="${SUBJECT}"
            -F o:tracking="yes"
            -F o:tag="rfl-weekly"
            -F html=@"${EMAIL_HTML}"
          )

          # Attach each PNG as inline so we can reference by cid:filename
          if [ -n "$PNG_LIST" ]; then
            for f in $PNG_LIST; do
              CURL_ARGS+=( -F "inline=@${f};type=image/png" )
            done
          fi

          echo "Sending email via Mailgun..."
          curl "${CURL_ARGS[@]}"
          echo "Email sent."

      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nb-output
          path: |
            ${{ github.workspace }}/*.png
            ${{ github.workspace }}/*.csv
            ${{ github.workspace }}/*.duckdb
            ${{ github.workspace }}/*.json
            ${{ runner.temp }}/nb-runner

name: Execute Python Notebook

on:  
  workflow_dispatch:
  schedule:    
     # Run at 8:00am New York time on Monday, Tuesday, and Friday
    - cron: "0 13 * * 1,2,5"

permissions:
  contents: write  # <-- allow pushing commits

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed so we can commit back

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install papermill jupyter pandas duckdb requests ipytree altair lxml_html_clean

      - name: Run notebook with parameters
        uses: yaananth/run-notebook@v2
        env:
          RUNNER: ${{ toJson(runner) }}
          SECRETS: ${{ toJson(secrets) }}
          GITHUB: ${{ toJson(github) }}
        with:
          notebook: "rfl.ipynb"
          isReport: false
          poll: true

      # ---- Commit ONE JSON file back to main ----
      # Change TARGET_JSON to the exact file your notebook creates.
      - name: Commit JSON output to main
        if: github.ref == 'refs/heads/main'  # only push when running on main
        env:
          TARGET_JSON: rfl_standings_2025.json      # <--- set your filename here
        run: |
          set -e
          if [ ! -f "$TARGET_JSON" ]; then
            echo "File $TARGET_JSON not found; nothing to commit."
            exit 0
          fi

          # Optionally ensure stable ordering/formatting to avoid noisy diffs
          # python - <<'PY'
          # import json, sys
          # p = sys.argv[1]
          # with open(p) as f: data = json.load(f)
          # with open(p, "w") as f: json.dump(data, f, indent=2, sort_keys=True)
          # PY "$TARGET_JSON"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add only that file
          git add "$TARGET_JSON"

          # Commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to $TARGET_JSON; skipping commit."
            exit 0
          fi
          
          git commit -m "chore: update $TARGET_JSON [nb-update]"
          git push origin HEAD:main

      # ---- Send Monday email via Gmail SMTP (New York time) ----
      - name: Send Monday email via Gmail
        if: ${{ always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
        shell: bash
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
          GMAIL_TO: ${{ secrets.GMAIL_TO }}
          GMAIL_FROM: ${{ secrets.GMAIL_FROM }}
        run: |2
          set -e

          : "${GMAIL_USER:?Missing GMAIL_USER}"
          : "${GMAIL_APP_PASSWORD:?Missing GMAIL_APP_PASSWORD}"
          : "${GMAIL_TO:?Missing GMAIL_TO}"

          python - <<'PY'
          import os, glob, email.utils, smtplib, time
          from datetime import datetime
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.image import MIMEImage

          ny_date = datetime.now().strftime("%B %d, %Y")

          user = os.environ["GMAIL_USER"]
          pwd = os.environ["GMAIL_APP_PASSWORD"]
          to_list = [x.strip() for x in os.environ["GMAIL_TO"].split(",") if x.strip()]
          from_disp = os.environ.get("GMAIL_FROM") or user

          pngs = sorted(glob.glob("*.png"), key=lambda p: os.path.getmtime(p), reverse=True)[:5]

          parts = []
          parts.append(f"<h2>RFL Weekly Update – {ny_date}</h2>")
          parts.append('<p>View the latest standings here: <a href="https://mhopkinsinc.github.io/rfl/">https://mhopkinsinc.github.io/rfl/</a></p>')
          for p in pngs:
              b = os.path.basename(p)
              parts.append("<div style='margin:16px 0'>"
                           f"<img src=\"cid:{b}\" alt=\"{b}\" "
                           "style='max-width:100%; height:auto; border:1px solid #ddd; padding:4px; border-radius:6px;'/>"
                           "</div>")
          parts.append("<hr><p style='font-size:12px;color:#777'>This message was sent automatically by GitHub Actions.</p>")
          html_body = "<!DOCTYPE html><html><body style='font-family:Arial,Helvetica,sans-serif'>" + "".join(parts) + "</body></html>"

          msg = MIMEMultipart('related')
          msg['Subject'] = f"RFL Weekly Update – {ny_date}"
          msg['From'] = from_disp
          msg['To'] = ", ".join(to_list)
          msg['Date'] = email.utils.formatdate(localtime=True)

          alt = MIMEMultipart('alternative')
          alt.attach(MIMEText("Your email client does not support HTML.", 'plain', 'utf-8'))
          alt.attach(MIMEText(html_body, 'html', 'utf-8'))
          msg.attach(alt)

          for p in pngs:
              with open(p, 'rb') as f:
                  img = MIMEImage(f.read(), _subtype='png', name=os.path.basename(p))
              cid = os.path.basename(p)
              img.add_header('Content-ID', f"<{cid}>")
              img.add_header('Content-Disposition', 'inline', filename=cid)
              msg.attach(img)

          with smtplib.SMTP('smtp.gmail.com', 587) as smtp:
              smtp.ehlo()
              smtp.starttls()
              smtp.ehlo()
              smtp.login(user, pwd)
              smtp.sendmail(user, to_list, msg.as_string())

          print(f"Sent Gmail email to: {', '.join(to_list)}")
                PY


      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nb-output
          path: |
            ${{ github.workspace }}/*.png
            ${{ github.workspace }}/*.csv
            ${{ github.workspace }}/*.duckdb
            ${{ github.workspace }}/*.json
            ${{ runner.temp }}/nb-runner
